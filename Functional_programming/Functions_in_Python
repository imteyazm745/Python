Functions : Recall that the def keyword is used to define a new function:

def fn_name(param1, param2):
    value = do_something()
    return value
    
Return
All functions calls return one object, although that object might be None (signifying no value) or a tuple containing multiple elements (signifying multiple values).

If there is no return statement, or just a bare return, the object returned is None.

Sometimes, it's correct to return multiple values from a function. For this, you can return a tuple of values: return value1, value2, value3. 
Beware that callers may not expect a tuple as a return value, so if you take this approach, you should document it well.

def no_return():
    pass
x = no_return()
print(x)  # => None

def empty_return():
    return
y = empty_return()
print(y) # => None

def normal_return():
    return 5
z = normal_return()
print(z) # => 5

def multiple_return():
    return 5, 6, 7
a,b,c = multiple_return()
print(a) # => 5
print(b) # => 6
print(c) # => 7

SCOPE 

x = 2                                                                                                                                                                                         
def fun(y): 
    z = 5 
    print(locals())  # =>  {'y': 3, 'z': 5}
# The locals() symbol table contains a mapping for the variable names 'y' (from the function's parameter) and 'z' (from the function's local variable).
    print(globals()['x'])  # => 2
        # => The globals() symbol table contains a mapping for the variable name 'x'.
    print(x, y, z)  # => 2 3 5 
fun(3)   

Example 2: 

x = 2                                                                                                                                                                                         
def broken_fun(y): 
    x = 41
    z = 5 
    print(locals())  # =>  {'y': 3, 'x': 41, 'z': 5}
    print(globals()['x'])  # => 2
    print(x, y, z)  # => 41 3 5 
broken_fun(3)   

Example3 : 
product = 'Water'

def shadowing_example(price):
    product = 'Bottled Water'  # Oops! Same name as in the global scope.
    quantity = 50
    print(locals())  # A
    print(globals()['product'])  # B
    print(product, price, quantity)  # C 
shadowing_example(10)

O/P-
{'price': 10, 'product': 'Bottled Water', 'quantity': 50}
Water
Bottled Water 10 50


