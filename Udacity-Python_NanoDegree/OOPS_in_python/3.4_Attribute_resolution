Now that we have a home instance object of the House class object, what can we do with it?

We can assign arbitrary attributes with values to the instance object with home.
attribute_name = value, which stores these attributes and their values in a special __dict__ attribute 
(in the exact same way that the class object did!). 
We can update these attributes too. When we try to access an attribute, 
if the attribute is found in the instance object's __dict__, we get back the associated value.

home.size = '1000'
print(home.size)  # 1000
print(home.__dict__)  # {'size': '1000'}

home.color = 'red'
print(home.__dict__)  # {'size': '1000', 'color': 'red'}

home.num_bathrooms = 2
home.num_bedrooms = 3
print(home.__dict__)  # {'size': '1000', 'color': 'red', 'num_bathrooms': 2, 'num_bedrooms': 3}

home.color = 'blue'
print(home.color)  # blue
print(home.num_bathrooms)  # 2

If you ever need to delete an attribute (rarely), you can use something like del home.color, 
which attempts to remove color from home's attributes (i.e. from home.__dict__).

Notice that num and greet aren't in home.__dict__, but rather are attributes of the class object 
(i.e they are in House.__dict__). What do you think will happen if we ask for home.num? 
What about home.greet? Feel free to use the interactive interpreter to explore your curiosities - we'll review together soon.

Special Functions
Python offers the special functions getattr, setattr, and delattr to perform these operations, if you would like to think of them functionally.

Specifically:

getattr(x, 'y') is equivalent to x.y. It also accepts a default fallback value if the attribute isn't found.
setattr(x, 'y', z) is equivalent to x.y = z
delattr(x, 'y') is equivalent to del x.y
To summarize:

Attributes are names that come after a dot, like obj.name and represent some information that is attached to an object.
Attributes can be retrieved or arbitrarily assigned on class objects or instance objects.
Class objects and instance objects each store their attributes in a special __dict__ attribute.

The __dict__ Attribute	A special attribute in which objects store arbitrary attributes.


