In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement 
real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming. The main concept 
of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.

Main Concepts of Object-Oriented Programming (OOPs)

Class
Objects
Polymorphism
Encapsulation
Inheritance
Data Abstraction

Class 
A class is a collection of objects. A class contains the blueprints or the prototype from which the objects are being created. 
It is a logical entity that contains some attributes and methods.

Classes are created by keyword class.
Attributes are the variables that belong to a class.
Attributes are always public and can be accessed using the dot (.) operator. Eg.: Myclass.Myattribute
SYNTAX : 
class ClassName:
   # Statement-1
   .
   .
   .
   # Statement-N

Objects
The object is an entity that has a state and behavior associated with it. It may be any real-world object 
like a mouse, keyboard, chair, table, pen, etc. Integers, strings, floating-point numbers, even arrays, and dictionaries, are all objects

An object consists of :

State: It is represented by the attributes of an object. It also reflects the properties of an object.
Behavior: It is represented by the methods of an object. It also reflects the response of an object to other objects.
Identity: It gives a unique name to an object and enables one object to interact with other objects.


