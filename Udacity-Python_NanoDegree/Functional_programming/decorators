Decorators are, by far, among the most satisfying features of Python. 
To understand them, we'll need to reframe some building blocks, because 
decorators are wild.

Functions as Arguments
We've already seen that functions can be arguments – the map and filter function expected 
the first argument to be a function object. We can go one step further,
and write a function that takes in everything we need to run another 
function – the function object,as well as variadic collections of arguments:

def perform_twice(fn, *args, **kwargs):
    fn(*args, **kwargs)
    fn(*args, **kwargs)

perform_twice(print, 5, 10, sep='&', end='...')
# 5&10...5&10...

The perform_twice function takes a function and its arguments, and calls it twice. 
Notice that the parameter list includes a variadic positional parameter and a variadic keyword parameter. 
In the implementation, it unpacks these captured arguments into the fn. This is a common pattern in which a function, 
such as perform_twice can capture any collection of arguments and forward them along to some captured function object, such as fn.

Functions as Return Values
Can we also create functions and return them from other functions. Why, of course! 
We can write a function make_divisibility_test(n) that produces a function to check whether a number m is divisible by n:

def make_divisibility_test(n):
    def divisible_by_n(m):
        return m % n == 0
    return divisible_by_n

div_by_3 = make_divisibility_test(3)
tuple(filter(div_by_3, range(10)))  # => (0, 3, 6, 9)

make_divisibility_test(5)(10)  # => True

We'll write a decorator that can modify any function so that it prints out its arguments when invoked so that we have an easier time debugging.

def print_args(function):
    def wrapper(*args, **kwargs):
        print(args, kwargs)
        return function(*args, **kwargs)
    return wrapper
This decorator captures a function, and creates and returns a new function named wrapper. 
The wrapper function captures any collection of arguments, prints them out, and then forwards 
them to the supplied function. Let's take a look at this decorator in action

def compute(x, y, z=1):
    return (x + y) * z

compute(3, 5, z=2)
# => 16

compute_log = print_args(compute)
compute_log(3, 5, z=2)
# (3, 5) {'z': 2}
# => 16
Wow! We modified a function to build a new one that can print out its arguments.
It'd be a bit of a pain to refactor the rest of the codebase to use compute_log instead of compute, so let's just rename compute itself.

compute = print_args(compute)
compute(3, 5, z=2)
# (3, 5) {'z': 2}
# => 16

Decorator Syntax
It's a bit awkward to have to write def compute and then compute = print_args(compute). 
If only there was a better way! In Python, there is.

@print_args
def compute(x, y, z=1):
    return (x + y) * z

import functools

def print_args(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
        print(args, kwargs)
        return function(*args, **kwargs)
    return wrapper
The functools.wraps(function) decorator updates the wrapper function so that it clones important properties from function.

Recap: Decorators
Fundamentally, a decorator is a transformation that can be applied to a function.

Decorators are inconceivably useful, and appear in surprising places. They can be used to:

Handle shared behavior to append to functions (as with print_args)
Cache return values to increase performance
Set a timeout on blocking functions
Mark class properties as "read-only"
Mark methods as static methods or class methods
Define event-driven handlers (for GUIs, or web-based clients)

@decorator :	Special syntax to apply a decorator to an immediately-subsequent function definition.
Decorator :	A high-level function that traditionally transforms an input function 
into a slightly-modified output function with desired decorated behavior.
