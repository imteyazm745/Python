Variadic Keyword Parameters
A parameter of the form **name (such as**kwargs) in a function signature introduces a variadic keyword parameter.
This parameter will capture excess keyword-supplied arguments into a dictionary named the same thing, such as kwargs.

Why would you ever do something like this? Usually, variadic keyword parameters are useful when you're either:
    1.Allowing arbitrary named parameters for special configuration
    2. As with variadic positional parameters, capturing an unknown collection of arguments, 
          in order to forward them to another handler, like a superclass, a decorator, or other fancy objects.
For example, the str.format method has the following signature:

str.format(*args, **kwargs)
Not only does this method have a variadic keyword parameter (**kwargs), it also has a variadic position parameter (*args)! 
This means that this method can receive any number of positionally-supplied arguments and any number of keyword-supplied arguments.

To get a feel for variadic keyword parameters, consider the following function and its various invocations:

def print_my_arguments(a, b=1, **c):
    print(f"a={a}, b={b}, c={c}")

print_my_arguments(2)                      # a=2, b=1, c={}
print_my_arguments(2, x=7)                 # a=2, b=1, c={'x': 7}
print_my_arguments(2, x=7, y=1)            # a=2, b=1, c={'x': 7, 'y': 1}
print_my_arguments(2, x=7, y=1, z=8)       # a=2, b=1, c={'x': 7, 'y': 1, 'z': 8}
print_my_arguments(2, x=7, y=1, z=8, b=2)  # a=2, b=2, c={'x': 7, 'y': 1, 'z': 8}
print_my_arguments(2, x=7, b=2, y=1, z=8)  # a=2, b=2, c={'x': 7, 'y': 1, 'z': 8}

Note that c is our variadic keyword parameter, and it contains a dictionary of the excess positionally-supplied arguments.

We'll use this new concept to write a function called authorize, which attributes a quote to an author, along with some extra information.

We'll want to be able to use the function in the following ways:

authorize(
    "If music be the food of love, play on.",
    playwright="Shakespeare",
    act=1,
    scene=1,
    speaker="Duke Orsino"
)
# > If music be the food of love, play on.
# ----------------------------------------
# playwright: Shakespeare
# act: 1
# scene: 1
# speaker: Duke Orsino
authorize(
    "O partigiano, portami via.",
    canzone="Bella Ciao",
    lingua="Italiano",
)
# > O partigiano, portami via.
# ----------------------------
# canzone: Bella Ciao
# lingua: Italiano

How will we write this function?

def authorize(quote, **speaker_info):
    print(">", quote)
    print("-" * (len(quote) + 2))
    for key, value in speaker_info.items():
        print(key, value, sep=': ')

info = {
    'sonnet': 18,
    'line': 1,
    'author': "Shakespeare"
}
authorize("Shall I compare thee to a summer's day", **info)  # Does the same thing as authorize("Shall I compare thee to a summer's day", sonnet=18, line=1, author='Shakespeare')
# > Shall I compare thee to a summer's day
# ----------------------------------------
# sonnet: 18
# line: 1
# author: Shakespeare
The syntax **mapping at a call site consumes the mapping's key-value pairs into a variable number of keyword-supplied arguments.

a = "First, thou shalt count to {0}".format(3)
print(a) #First, thou shalt count to 3

b = "{0} shalt thou not count, neither count thou {1}, excepting that thou then procee d to {2}".format (4, 2, 3)
print(b) # 4 shalt thou not count, neither count thou 2, excepting that thou then procee d to 3

c = "lobbest thou thy {weapon} towards thy foe".format(
        weapon = "Holy Hand Grenade of Antioch"
)
print(c) #lobbest thou thy Holy Hand Grenade of Antioch towards thy foe

d ="{0}{b}{1}{a}{0}{2}".format(
5, 8, 9, a='z', b='x'
)
print(d) #5x8z59

x = 5
y = 6
f"{x} {y}" # '5 6'

f"{x} {y}".format(x=x,y=y) #'5 6'

 f"{x} {y} {x+y}"  # '5 6 11'

def f(a, b, c=1, *d, e=1, **f)
This contain six different argument names.
a & b is positional arguments
c is optional keyword argument
*d represents a variadic positional argument list.
e=1 is keyword-only argument
**f is a variadic keyword argument

str.format :	A method to format a string by substituting values passed by position or by keyword.
Variadic Keyword Argument Unpacking :	A mechanism to unpack an mapping with the syntax mapping into keyword arguments supplied when a function is invoked.
Variadic Keyword Parameter Collection :	A category of parameter like kwargs that captures a variable number of excess keyword arguments in a dictionary.
