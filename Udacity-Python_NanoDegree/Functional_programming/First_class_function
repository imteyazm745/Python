def echo(arg):
    return arg

type(echo)     # <class 'function'>
hex(id(echo))  # 0x1003c2bf8
print(echo)    # <function echo at 0x1003c2bf8>

foo = echo
hex(id(foo))   # 0x1003c2bf8
print(foo)     # <function echo at 0x1003c2bf8>

'echo' in locals()

isinstance(echo, object)  # => True

Yes! Functions are objects too. 

Let's look back at our example from before:

def echo(arg):
    """Return the first argument."""
    return arg

print(echo.__name__)  # => echo
print(echo.__doc__)  # => Return the first argument.
print(echo.__code__)  # => <code object echo at 0x..., file "...", line X>

Among perhaps other attributes, a function object has: a .__name__ – the function's name, determined when the function object is created;
a .__doc__ – the function's docstring, which serves as the function's documentation; 
and a .__code__ object – the actual object that makes up the code that tells Python how to execute this function.

Function Objects :	A type of object in Python representing a callable function.
The fn.__code__ attribute :	An attribute of function objects that represents the function's code object.
The fn.__doc__ attribute : An attribute of function objects that represents the function's documentation string.
The fn.__name__ attribute :	An attribute of function objects that represents the function's name.

n particular, function documentation is a good place to observe a standard. If you write the function:

def do_a_task(x):
    """Log the user into the system.

    The user must already have a valid username.

    :param x: The username.
   """
   pass
   
