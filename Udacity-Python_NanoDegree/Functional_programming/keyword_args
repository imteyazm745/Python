Keyword Arguments :
Keyword arguments, also known as default arguments, named arguments, or optional arguments. 
are a mechanism for providing a default value for one or more parameters.

Arguments can be supplied by position or by keyword
Each parameter must end up bound to a value

def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

This function has one required (positional) argument and three optional (keyword) arguments.

Let's take a more detailed look at valid and invalid ways to call this function.

Valid Calls
def parrot(voltage, state='...', action='...', type='...')

# 1 positional argument
parrot(1000)

# 1 keyword argument
parrot(voltage=1000)

# 2 keyword arguments
parrot(voltage=1000000, action='VOOOOOM')

# 2 keyword arguments
parrot(action='VOOOOOM', voltage=1000000)

# 3 positional arguments
parrot('a million', 'bereft of life', 'jump')

# 1 positional, 1 keyword
parrot('a thousand', state='pushing up the daisies')

Invalid Calls
def parrot(voltage, state='...', action='...', type='...')

# Missing a required argument.
parrot()

# Non-keyword argument after a keyword argument.
parrot(voltage=5.0, 'dead')

# Duplicate value for the same argument.
parrot(110, voltage=220)

# Unknown keyword argument.
parrot(actor='John Cleese')

Let's take a look at another example:

Here's the signature of a Python function ask_yn, which might repeatedly ask the user for an answer to a yes/no question:

def ask_yn(prompt, retries=4, complaint='Enter Y/N!'):
    for i in range(retries):
        ok = input(prompt).strip()
        if ok in ('Y', 'y'):
            return True
        if ok in ('N', 'n'):
            return False
        print(complaint)
    return False

This function can be called in a number of ways:

# Call with only the mandatory argument
ask_yn('Really quit?')

# Call with one keyword argument
ask_yn('OK to overwrite the file?', retries=2)

# Call with one keyword argument - in any order!
ask_yn('Update status?', complaint='Just Y/N')

# Call with all of the keyword arguments
ask_yn('Send text?', retries=2, complaint='Y/N please!')

# These can provide variants of a simple idea.
ask_yn("Do you like raindrops on roses?")
ask_yn("How about whiskers on kittens?", retries=10)
ask_yn("Any love for bright copper kettles?", complaint="Yes or no :)")
ask_yn("Would you like warm woolen mittens?", retries=10, complaint="A yes or no shall suffice.")

Argument :	An object (or a name referring to an object) that is supplied to a function when the function is invoked.
Keyword Argument :	An argument that is supplied to a function call by keyword, not by position.
Optional Parameter :	A category of parameter defined by a function signature that provides a default value for a parameter name.
Parameter :	A name defined in a function signature that will be bound to a value when the function is invoked.
Positionally-Supplied Argument :	An argument that is supplied to a function call by position, not by keyword.
Required Parameter :	A category of parameter defined by a function signature that does not provide any default value, 
and must receive a value from a corresponding supplied argument.
