Map and Filter

A common pattern in any programming language is to transform a collection by applying a function to each element. In a procedural-looking way:

output = []
for element in iterable:
    val = function(element)
    output.append(val)

We can accomplish the same task in a declarative-looking way:

output = [
    function(element)
    for element in iterable
]
For example, if we have languages = ["python", "perl", "java", "c++"], then [len(s) for s in languages] evaluates to [6, 4, 4, 3].

But really, what are we even doing? We're just applying a function over a collection - it doesn't quite matter exactly how the collection is built up. 
In this case, Python provides us with a new function - the map function:

map(fn, iter)

The map function transforms a stream of data from an iterable and produces a stream of data by applying the function to each element
Interestingly, the first argument to map is a function object! 
This is the first time we've seen a function object be passed as an argument to another function.

Practically, this means that Python lets us rewrite the above example to:

map(len, languages)

The map function doesn't actual produce a list, though. 
It returns an object which we can consume to get the transformed values â€“ for example, we could see that:

tuple(map(len, languages))  # => (6, 4, 4, 3)

Filter
Another common pattern in any programming language is to transform a collection 
by applying a function to each element. In a procedural-looking way:

output = []
for element in iterable:
   if predicate(element):
      output.append(element)
We can accomplish the same task in a declarative-looking way:

output = [
  element
  for element in iterable
  if predicate(element)
]

If we wanted to find only the members from our rolodex, we might run:

[client for client in rolodex if is_member(client)]

filter(predicate_function, iterable)
The filter function filters only the elements from a stream of data that pass through a predicate function. 
As before, the first argument to filter is a function object!

Practically, this means that Python lets us rewrite the above example to:

filter(is_member, rolodex)
As before, the filter function doesn't actual produce a list, though. It returns an object which we can consume to get the filtered values.

>>> map(float, ['1.0', '2.5', '-4.1'])
<map object at 0x7efde305d340>
>>> m= map(float, ['1.0', '2.5', '-4.1'])
>>> list(map(float, ['1.0', '2.5', '-4.1']))
[1.0, 2.5, -4.1]
>>> def is_even(n):
...     return n%2==0
... 
>>> filter(is_even, range(1000))
<filter object at 0x7efde305d340>
>>> list(filter(is_even, range(100)))
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 
52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]

Aesthetics of map and filter
Benefits

Compute data-on-demand, don't buffer it.
Faster than list comprehensions in some cases.

filter :	A built-in function that filters an iterable by keeping only elements that successfully pass a predicate function.
map :	A built-in function that applies a function to every element of an iterable.
