List Comprehensions
A list comprehension is a concise way to create and populate a list in Python in a declarative, 

List Comprehensions provide an elegant way to create new lists. The following is the basic structure of a list comprehension:
output_list = [output_exp for var in input_list if (var satisfies this condition)]

Example #1: Suppose we want to create an output list which contains only the even numbers which are present in the input list. 
Let’s see how to do this using for loops and list comprehension and decide which method suits better.

# Constructing output list WITHOUT
# Using List comprehensions
input_list = [1, 2, 3, 4, 4, 5, 6, 7, 7]
  
output_list = []
  
# Using loop for constructing output list
for var in input_list:
    if var % 2 == 0:
        output_list.append(var)
  
print("Output List using for loop:", output_list) # => Output List using for loop: [2, 4, 4, 6]

rather than imperative, fashion. Consider the following code snippet to produce a list of the first 10 perfect squares:
squares = []
for x in range(10):
    squares.append(x ** 2)  # =>  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

Really, what we'd like to describe is that we'd like a list of the squares of 
the first 10 elements – Python providesa syntactic tool to abbreviate this common pattern:

[x ** 2 for x in range(10)] # =>  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

The general structure of a list comprehension is:
[f(xs) for xs in iter]; Example [x ** 2 for x in range(10)]

The square brackets indicate that we're building a list. To write a list comprehension, 
we need both an iterable over which we'll iterate as well as an expression that transforms 
each element of the iterable to generate the new list elements.

In some cases, we might want to only keep elements that satisfy a predicate condition. 
For example, we could construct a list of only the even perfect squares:
[x ** 2 for x in range(10) if x % 2 == 0] # =>  [0, 4, 16, 36, 64]

# => for set
{x ** 2 for x in range(10) if x % 2 == 0} # => set {0, 4, 16, 36, 64}

Examples
List comprehensions are remarkably useful for capturing a wide variety of data transformations.
# Lowercased versions of words in a sentence.
[word.lower() for word in sentence]

# Words in a sentence of more than 8 letters long.
[word for word in sentence if len(word) > 8]

# 3-tuples of the first ten numbers and their squares and cubes.
[(x, x ** 2, x ** 3) for x in range(10)]

# Indices for a triangular matrix.
[(i,j) for i in range(5) for j in range(i)]

Dictionary Comprehensions :- 
Extending the idea of list comprehensions, we can also create a dictionary using dictionary comprehensions.
The basic structure of a dictionary comprehension looks like below.
        output_dict = {key:value for (key, value) in iterable if (key, value satisfy this condition)}

Example #1: Suppose we want to create an output dictionary which contains only the odd numbers that are present 
in the input list as keys and their cubes as values. Let’s see how to do this using for loops and dictionary comprehension.
# Using Dictionary comprehensions
# for constructing output dictionary
input_list = [1,2,3,4,5,6,7] 
dict_using_comp = {var:var ** 3 for var in input_list if var % 2 != 0}
print("Output Dictionary using dictionary comprehensions:",  dict_using_comp)
   # Output Dictionary using dictionary comprehensions: {1: 1, 3: 27, 5: 125, 7: 343}                                         

The syntax {key_func(vars): value_func(vars) for vars in iterable} creates 

a dictionary mapping keys to values. It's equivalent to the following code:
d = {}
for vars in iterable:
    d[key_func(vars)] = value_func(vars)
return d

For example, to swap the keys and values in a dictionary,* we can use the expression:
return {v: k for k, v in d.items()}

# => Dictionary Example2
        {x: x ** 2 for x in range(10) if x % 2 == 0} # => {0: 0, 2: 4, 4: 16, 6:36, 8: 64}

As before, there can be optional predicates tacked onto the end: {key_func(vars): val_func(vars) for vars in iterable if predicate_func(vars)}.
For example, the expression 
{student: grades for student, grades in gradebook.items() if sum(grades) / len(grades) > 90 builds a 
dictionary of student grades for students whose average grade is at least 90.**
What happens if multiple keys map to the same value? Try it out in the interactive interpreter.
What would happen if a student exists, but has no grades, in the gradebook? How could you modify the dictionary expression to avoid this case?

