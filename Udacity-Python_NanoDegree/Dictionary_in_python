Mappings
A mapping is a mutable map from hashable values to arbitrary objects. There is just one standard mapping type – dict – although a few more live in the collections module.
Mappings are often used for:
Encoding associative information
Capturing plain data with named fields.
Building more complicated data structures.
Dictionary : It’s this mutable association between keys and value.
Creating a dict
There are many ways to create a dictionary:
# Create an empty dictionary.
empty = {}
type(empty)      # => dict
empty == dict()  # => True

# Create a dictionary with key:value pairings.
a = dict(one=1, two=2, three=3)
b = {'one': 1, 'two': 2, 'three': 3}
c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
d = dict([('two', 2), ('one', 1), ('three', 3)])
e = dict({'three': 3, 'one': 1, 'two': 2})
f = dict({'one': 1, 'three': 3}, two=2)
a == b == c == d == e == f  # => True
The first case requires the keys to be valid Python identifiers, but all other constructors accept arbitrary hashable keys.

Access and Modify a Mapping
Python's dicts are mutable – we can access and modify the pairings contained within:
d = {"one": 1, "two": 2, "three": 3}
 
# Access
d['one']  # => 1
d['five']  # Raises an error (KeyError)!
 
# Modify
d['two'] = 22  # Modify an existing key
d['four'] = 4  # Add a new key

Get with Default
In some cases, you'll want to either get the value associated with a key, or a default value if it's missing, rather than raising a KeyError. In these cases, you can use dict.get:
temps = {'CA': [101, 115, 108], 'NY': [98, 102]}
temps['California']  # Raises an error (KeyError)!
 
temps.get('CA')   # => [101, 115, 108]
temps.get('KY')   # => None (not a KeyError!)
 
ky_temps = temps.get('KY', [])
num_observations = len(ky_temps)
The .get method, when passed a nonexistent key as the first argument, returns None (by default) or its second argument if specified. This allows us to write code that is robust to a variety of circumstances.

Removing Elements
There are a few techniques for removing elements from a dictionary:
d = {"one": 1, "two": 2, "three": 3}
# Raises a KeyError if the key is missing.
del d["one"]
# Remove and return `d['three']`, or the default value if 'three' is not in the map.
d.pop("three", default)  # => 3
# Remove and return an arbitrary (key, value) pair. Useful for destructive iteration.
d.popitem()  # => ("two", 2)
You can also explicitly use the .clear() method to wipe a dictionary clean.
Views
A dictionary also provides methods to access views of only its keys, only its values, or only its items (as a pair of (key, value) tuples).
d = {"one": 1, "two": 2, "three": 3}
d.keys()
d.values()
d.items()
 
Each of the returned objects is a subtype of MappingView, an abstract type that supports, among other operations, len(view), iter(view), and x in view. This enables the following code:
len(d.keys())  # => 3
('one', 1) in d.items()  # => True
for value in d.values():
    print(value)  # Prints 1, 2, and 3
keys_list = list(d.keys())  # Create a new list, decoupled from the changes to the original dict.
Note that iterating over a dictionary produces elements from its collection of keys – if you want to loop over key:value pairs, you'll likely use the following pattern:
for key, value in mydict.items():
    do_something_with(key, value)
 
