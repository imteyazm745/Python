Mappings
A mapping is a mutable map from hashable values to arbitrary objects. There is just one standard mapping type – dict – although a few more live in the collections module.
Mappings are often used for:
Encoding associative information
Capturing plain data with named fields.
Building more complicated data structures.
Dictionary : It’s this mutable association between keys and value.
Creating a dict
There are many ways to create a dictionary:
# Create an empty dictionary.
empty = {}
type(empty)      # => dict
empty == dict()  # => True

# Create a dictionary with key:value pairings.
a = dict(one=1, two=2, three=3)
b = {'one': 1, 'two': 2, 'three': 3}
c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
d = dict([('two', 2), ('one', 1), ('three', 3)])
e = dict({'three': 3, 'one': 1, 'two': 2})
f = dict({'one': 1, 'three': 3}, two=2)
a == b == c == d == e == f  # => True
The first case requires the keys to be valid Python identifiers, but all other constructors accept arbitrary hashable keys.



