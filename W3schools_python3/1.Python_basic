Python Syntax : 
print("Hello, World!")  # => Hello, World!

Python Indentation : Indentation refers to the spaces at the beginning of a code line.
Example
if 5 > 2:
  print("Five is greater than two!")

Python Variables : Variables are containers for storing data values.
Variable Names
A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)
Variable names are case-sensitive.
String variables can be declared either by using single or double quotes:
Example : Legal variable names:

myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

Camel Case : Each word, except the first, starts with a capital letter:
myVariableName = "John"

Pascal Case : Each word starts with a capital letter:
MyVariableName = "John"

Snake Case : Each word is separated by an underscore character:
my_variable_name = "John"

In Python, variables are created when you assign a value to it:
Example ; Variables in Python:
x = 5
y = "Hello, World!"
print(x)
print(y)

Casting : If you want to specify the data type of a variable, this can be done with casting.

Example
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0

Get the Type
You can get the data type of a variable with the type() function.

Example
x = 5
y = "John"
print(type(x)) # => <class 'int'>
print(type(y)) # => <class 'str'>

Many Values to Multiple Variables
Python allows you to assign values to multiple variables in one line:

Example
x, y, z = "Orange", "Banana", "Cherry"
print(x) # => Orange
print(y) # => Banana
print(z) # => Cherry

One Value to Multiple Variables
And you can assign the same value to multiple variables in one line:

Example
x = y = z = "Orange"
print(x) # => Orange
print(y) # => Orange
print(z) # => Orange

Unpack a Collection
If you have a collection of values in a list, tuple etc. Python allows you to extract the values into variables. This is called unpacking.

Example
Unpack a list:

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x) # => apple
print(y) # => banana
print(z) # => cherry

Output Variables : The Python print() function is often used to output variables.
Example
x = "Python is awesome"
print(x)

In the print() function, you output multiple variables, separated by a comma, OR You can also use the + operator to output multiple variables.
Example
x = "Python"
y = "is"
z = "awesome"
print(x, y, z) #OR print(x + y + z) # => Python is awesome

For numbers, the + character works as a mathematical operator:
Example
x = 5
y = 10
print(x + y) # => 15

Global Variables
Variables that are created outside of a function (as in all of the examples above) are known as global variables.
Global variables can be used by everyone, both inside of functions and outside.
Example
Create a variable outside of a function, and use it inside the function
x = "awesome"
def myfunc():
  print("Python is " + x)
myfunc() # => Python is awesome

Example
Create a variable inside a function, with the same name as the global variable
x = "awesome"
def myfunc():
  x = "fantastic"
  print("Python is " + x)
myfunc() # => Python is fantastic
print("Python is " + x) # => Python is awesome

Comments : Python has commenting capability for the purpose of in-code documentation.

Comments start with a #, and Python will render the rest of the line as a comment:

Example : Comments in Python:

#This is a comment.
print("Hello, World!")

Multi Line Comments
"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")
